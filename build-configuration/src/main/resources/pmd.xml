<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: pmd.xml 87 2014-02-20 12:44:18Z filipvanlaenen $ --> 
<ruleset name="Custom PMD ruleset for E-vote 2011" xmlns="http://pmd.sf.net/ruleset/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
  <description>
    This is the custom PMD ruleset for the E-vote 2011 project.
  </description>
  <rule ref="rulesets/java/basic.xml"/>
  <rule ref="rulesets/java/braces.xml"/>
  <rule ref="rulesets/java/codesize.xml">
    <exclude name="ExcessivePublicCount"/>
    <!-- To be implemented -->
    <exclude name="TooManyMethods"/>
  </rule>
  <rule ref="rulesets/java/clone.xml"/>
  <!-- To be implemented -->
  <!-- rule ref="rulesets/java/controversial.xml/AssignmentInOperand"/ -->
  <rule ref="rulesets/java/controversial.xml/DontImportSun"/>
  <rule ref="rulesets/java/design.xml">
    <!-- The rule EmptyMethodInAbstractClassShouldBeAbstract has a bug in PMD 4.1, generating false positives. See e.g. PMD tracker 1855409 -->
    <exclude name="EmptyMethodInAbstractClassShouldBeAbstract"/>
    <!-- The rule UncommentedEmptyMethod suffers from the same problem as EmptyMethodInAbstractClassShouldBeAbstract, see above. -->
    <exclude name="UncommentedEmptyMethod"/>
  </rule>
  <rule ref="rulesets/java/imports.xml"/>
  <!-- To be implemented -->
  <!-- rule ref="rulesets/java/logging-java.xml"/ -->
  <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
  <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
  <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
  <rule ref="rulesets/java/naming.xml/ClassNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/MethodNamingConventions"/>
  <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
  <rule ref="rulesets/java/naming.xml/NoPackage"/>
  <rule ref="rulesets/java/naming.xml/PackageCase"/>
  <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
  <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
  <rule ref="rulesets/java/naming.xml/VariableNamingConventions"/>
  <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
  <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
  <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith"/>
  <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
  <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
  <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
  <!-- To be implemented -->
  <!-- rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/ -->
  <rule ref="rulesets/java/strings.xml">
    <!-- The rule AvoidDuplicateLiterals is already handled by Checkstyle's MultipleStringLiterals check -->
    <exclude name="AvoidDuplicateLiterals"/>
  </rule>
  <rule ref="rulesets/java/unusedcode.xml"/>
</ruleset>
